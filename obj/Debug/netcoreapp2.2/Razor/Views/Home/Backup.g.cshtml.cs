#pragma checksum "/Users/momo/Desktop/TutorLibrary/Views/Home/Backup.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a50fa6feea81353f090be3a36b673d077571b8b7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Backup), @"mvc.1.0.view", @"/Views/Home/Backup.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Backup.cshtml", typeof(AspNetCore.Views_Home_Backup))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Users/momo/Desktop/TutorLibrary/Views/_ViewImports.cshtml"
using LandR;

#line default
#line hidden
#line 2 "/Users/momo/Desktop/TutorLibrary/Views/_ViewImports.cshtml"
using LandR.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a50fa6feea81353f090be3a36b673d077571b8b7", @"/Views/Home/Backup.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4aecdc30a165aa4854e47665aa0af97b1bb45670", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Backup : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "/Users/momo/Desktop/TutorLibrary/Views/Home/Backup.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
            BeginContext(42, 4842, true);
            WriteLiteral(@"
<!-- Client side libs required  -->
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.css"" crossorigin=""anonymous"">
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/css/blueimp-gallery.min.css"" crossorigin=""anonymous"">

<style>
    html {
        font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    }
    main {
        margin: 20px;
    }
    #gallery-note {
        font-size: smaller
    }
    .blueimp-gallery {
        margin: 25px;
        max-width: 150px;
        padding-bottom: 150px;
    }
    .dropzone {
        border: 3px dashed #00a1f1;
        background: #F0F8FF;
        margin: 25px;
        border-radius: 5px;
        max-width: 400px;
    }
    .dropzone .dz-message {
        font-weight: 350;
    }
    .dropzone .dz-message .note {
        font-family: sans-serif;
        font-size: 18px;
        font-weight: 200;
        display: block;
        ma");
            WriteLiteral(@"rgin-top 1.5rem;
    }
</style>


<main>
        <h2>Generated Thumbnails</h2>
            <!-- <p><span id=""gallery-note"">Gallery refreshes from storage container image links every 5 seconds.</span></p> -->
            <div id=""stored-images""></div>

            <!-- The Gallery as inline carousel, can be positioned anywhere on the page -->
            <div id=""blueimp-gallery-carousel"" class=""blueimp-gallery blueimp-gallery-carousel"">
                <div class=""slides""></div>
                <h3 class=""title""></h3>
                <a class=""prev"">‹</a>
                <a class=""next"">›</a>
                <a class=""play-pause""></a>
                <ol class=""indicator""></ol>
            </div>
        </div>
    </div>
    <div class=""box footer"">
        <hr>
        <div class=""privacy"">
            <p>This app has no official privacy policy. Your data will be uploaded to a service in order produce a picture.
                Your images will be public once you upload them and there is no automated way to");
            WriteLiteral(@" remove them.</p>
        </div>
    </div>
</main>

<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/js/blueimp-gallery.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js""></script>

<script>
    // init gallery for later use
    var gallery;
    // Grab links for images from backend api
    function fetchImageLinks() {
        // Fetch images
        $.get(""api/Images/thumbnails"", function(fetchedImageLinks) {
            console.log(fetchedImageLinks)
            // Check if anything is in there
            if ( _.isEmpty(fetchedImageLinks) ){
                console.log('empty fetched')
                // do nothing  
            } else {
                // Check if we have a gallery initialized
                if ( _.isEmpty(gallery) ) {
 ");
            WriteLiteral(@"                   // initialize gallery
                    gallery = blueimp.Gallery(
                                fetchedImageLinks, // gallery links array
                                {
                                    container: '#blueimp-gallery-carousel',
                                    carousel: true
                                } // gallery options
                            );                    
                } else {
                    // check if images are equal to array
                    console.log('currently in gallery:')
                    console.log(gallery.list)
                    var imageLinksEqual = _.isEqual(_.sortBy(gallery.list.map(s => s.split(""?"")[0])), _.sortBy(fetchedImageLinks.map(s => s.split(""?"")[0])))
                    if ( imageLinksEqual ) {
                        console.log('images arr are equal')
                        // do nothing
                    } else {
                        console.log('images arr are not equal')
                  ");
            WriteLiteral(@"      // update gallery with new image urls. Only compare actual url without SAS token query string
                        var newImageLinks = _.difference(fetchedImageLinks.map(s => s.split(""?"")[0]), gallery.list.map(s => s.split(""?"")[0]))
                        console.log('differene is: ')
                        console.log(newImageLinks)
                        // Only add new images
                        gallery.add(newImageLinks);
                        // Force image load
                        gallery.next();
                    }
                }       
            }     
        });
    }
    // Start first interval
    fetchImageLinks()
    
  setInterval(function() {
       fetchImageLinks()
    }, 5000) 


</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
