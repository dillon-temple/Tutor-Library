#pragma checksum "/Users/momo/Desktop/TutorLibrary/Views/Home/Backup copy.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6ebc454920a3eb35fd08eb493d6bba25b3e699ef"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Backup_copy), @"mvc.1.0.view", @"/Views/Home/Backup copy.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Backup copy.cshtml", typeof(AspNetCore.Views_Home_Backup_copy))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "/Users/momo/Desktop/TutorLibrary/Views/_ViewImports.cshtml"
using LandR;

#line default
#line hidden
#line 2 "/Users/momo/Desktop/TutorLibrary/Views/_ViewImports.cshtml"
using LandR.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6ebc454920a3eb35fd08eb493d6bba25b3e699ef", @"/Views/Home/Backup copy.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4aecdc30a165aa4854e47665aa0af97b1bb45670", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Backup_copy : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2517, true);
            WriteLiteral(@"<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.css"" crossorigin=""anonymous"">
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/css/blueimp-gallery.min.css"" crossorigin=""anonymous"">

        
        <h2>Generated Thumbnails</h2>
            <!-- <p><span id=""gallery-note"">Gallery refreshes from storage container image links every 5 seconds.</span></p> -->
            <div id=""stored-images""></div>

            <!-- The Gallery as inline carousel, can be positioned anywhere on the page -->
            <div id=""blueimp-gallery-carousel"" class=""blueimp-gallery blueimp-gallery-carousel"">
                <div class=""slides""></div>
                <h3 class=""title""></h3>
                <a class=""prev"">‹</a>
                <a class=""next"">›</a>
                <a class=""play-pause""></a>
                <ol class=""indicator""></ol>
            </div>
        </div>
    </div>
<script src=""https://ajax.googleapis.com/ajax/li");
            WriteLiteral(@"bs/jquery/3.2.1/jquery.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/blueimp-gallery/2.25.2/js/blueimp-gallery.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js""></script>

<script>
    // init gallery for later use
    var gallery;
    // Grab links for images from backend api
    function fetchImageLinks() {
        // Fetch images
        $.get(""api/Images/thumbnails"", function(fetchedImageLinks) {
            // Check if anything is in there
            if ( _.isEmpty(fetchedImageLinks) ){
                console.log('empty fetched')
                // do nothing  
            } else {
                // Check if we have a gallery initialized
                if ( _.isEmpty(gallery) ) {
                    // initialize gallery
                    gallery = blueimp.Gallery(
                                fetchedImageLinks, // ga");
            WriteLiteral(@"llery links array
                                {
                                    container: '#blueimp-gallery-carousel',
                                    carousel: true
                                } // gallery options
                            );                    
                } else {
                    // check if images are equal to array
                    console.log('currently in gallery:')
                    console.log(gallery.list)
");
            EndContext();
            BeginContext(2680, 1026, true);
            WriteLiteral(@"                    if ( imageLinksEqual ) {
                        console.log('images arr are equal')
                        // do nothing
                    } else {
                        console.log('images arr are not equal')
                        // update gallery with new image urls. Only compare actual url without SAS token query string
                        var newImageLinks = _.difference(fetchedImageLinks.map(s => s.split(""?"")[0]), gallery.list.map(s => s.split(""?"")[0]))
                        console.log('differene is: ')
                        console.log(newImageLinks)
                        // Only add new images
                        gallery.add(newImageLinks);
                        // Force image load
                        gallery.next();
                    }
                }       
            }     
        });
    }

        // Start first interval
    fetchImageLinks()
    
    setInterval(function() {
        fetchImageLinks()
    }, 5000) 
    /* Dropzone */

</scrip");
            WriteLiteral("t>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
